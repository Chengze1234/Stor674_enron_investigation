ungroup()
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of all emails sent within company (>=500)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- all.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 500) %>%
ungroup()
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of all emails received within company(>=500)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png("email_cluster_all.png", width=3200, height = 3200)
plot(community, graph)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png("email_network_all.png", width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(inboxes.within.fromto.df$from, levels = all_names), factor(inboxes.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(community)
print(community)
+
print(community$membership)
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
community$memberships
modularity_score <- modularity(community)
print(modularity_score)
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, "community_assignments.csv", row.names = FALSE)
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
membership(community)
target_community <- 10
target_nodes <- V(graph)$name[membership_vector == target_community]
membership(community)
target_community <- 10
target_nodes <- V(graph)$name[membership(community) == target_community]
print(target_nodes)  # Display the nodes in the target community
View(users)
cluster1 <- users[name %in% target_nodes]
View(cluster1)
cluster1 <- users[name == target_nodes]
View(cluster1)
target_nodes
cluster1 <- users %>%
filter(name %in% target_community)
View(cluster1)
users$name
target_nodes[1]
cluster1 <- users[users$name %in% target_nodes, ]
View(cluster1)
target_community <- 8
target_nodes <- V(graph)$name[membership(community) == target_community]
print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes, ]
View(cluster2)
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <- 10
target_nodes <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes, ]
target_community <- 8
target_nodes <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes, ]
cluster1
cluster2
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <-
target_nodes <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes, ]
target_community <- 8
target_nodes <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes, ]
cluster1
cluster2
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <- 10
target_nodes <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes, ]
target_community <- 8
target_nodes <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes, ]
cluster1
cluster2
View(all.within.fromto.df)
c1.within.df <- all.within.fromto.df %>%
filter(from %in% cluster1$name) %>%
filter(to %in% cluster1$name)
View(c1.within.df)
c2.within.df <- all.within.fromto.df %>%
filter(from %in% cluster2$name) %>%
filter(to %in% cluster2$name)
View(c2.within.df)
c1_count_table <- table(factor(c1.within.df$from, levels = all_names), factor(c1.within.df$to, levels = all_names))
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_c1_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
c1_count_table <- table(factor(c1.within.df$from, levels = all_names), factor(c1.within.df$to, levels = all_names))
mail_count_df <- melt(c1_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_c1_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
plot(graph)
c1_count_table <- table(factor(c1.within.df$from), factor(c1.within.df$to))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
c1_count_table <- table(factor(c1.within.df$from, levels = all_names), factor(c1.within.df$to, levels=all_names))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
plot(graph)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.filtered.df$from, levels = all_names), factor(c1.filtered.df$to, levels=all_names))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
plot(graph)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.within.df$from, levels = target_nodes_1), factor(c1.within.df$to, levels=target_nodes_1))
membership(community)
target_community <- 10
target_nodes_1 <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes_1, ]
target_community <- 8
target_nodes_2 <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes_2, ]
c1.within.df <- all.within.fromto.df %>%
filter(from %in% cluster1$name) %>%
filter(to %in% cluster1$name)
c2.within.df <- all.within.fromto.df %>%
filter(from %in% cluster2$name) %>%
filter(to %in% cluster2$name)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.within.df$from, levels = target_nodes_1), factor(c1.within.df$to, levels=target_nodes_1))
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
plot(graph)
View(cluster1)
membership(community)
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
membership(community)
target_community <- 10
target_nodes_1 <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes_1, ]
set.seed(123)
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
membership(community)
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <- 10
target_nodes_1 <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes_1, ]
target_community <- 9
target_nodes_2 <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes_2, ]
c1.within.df <- all.within.fromto.df %>%
filter(from %in% cluster1$name) %>%
filter(to %in% cluster1$name)
c2.within.df <- all.within.fromto.df %>%
filter(from %in% cluster2$name) %>%
filter(to %in% cluster2$name)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.within.df$from, levels = target_nodes_1), factor(c1.within.df$to, levels=target_nodes_1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(c1_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
layout <- layout_with_fr(graph)
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
View(filtered_receive)
print(c1_count_table)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.filtered.df$from, levels = target_nodes_1), factor(c1.filtered.df$to, levels=target_nodes_1))
c1_count_table
c2.filtered.df <- c2.within.df %>%
filter(from != to)
c2_count_table <- table(factor(c2.filtered.df$from, levels = target_nodes_1), factor(c2.filtered.df$to, levels=target_nodes_1))
c2_count_table
c2.filtered.df <- c2.within.df %>%
filter(from != to)
c2_count_table <- table(factor(c2.filtered.df$from, levels = target_nodes_2), factor(c2.filtered.df$to, levels=target_nodes_2))
c2_count_table
graph <- graph_from_adjacency_matrix(c2_count_table, mode = "directed", weighted = TRUE, diag = FALSE)
plot(graph)
graph <- graph_from_adjacency_matrix(c2_count_table, mode = "directed", weighted = TRUE, diag = FALSE)
layout <- layout_with_fr(graph)
plot(graph)
