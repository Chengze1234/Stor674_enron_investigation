common_users <- intersect(filtered_sent$from, filtered_receive$to)
print(common_users)
causholli_inbox <- inboxes.within.fromto.df %>%
filter(to == 'causholli-m')
causholli_inbox
filtered_sent <- all.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 500) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
all.within.fromto.df <- all.fromto.df %>%
filter(from %in% all_possible_mailnames)
# match the mailnames with names
all.within.fromto.df <- all.within.fromto.df %>%
mutate(match_row = match(from, users$mailname)) %>%
filter(!is.na(match_row)) %>%
mutate(name = users$name[match_row], from = name) %>%
select(-match_row, -name)
filtered_sent <- all.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 500) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of all emails sent within company (>=500)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- all.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 500) %>%
ungroup()
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of all emails received within company(>=500)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
# filter the mails
filtered_sent <- all.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 2000) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of all emails sent within company (>=2000)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- all.within.fromto.df %>%
group_by(to) %>%
ffilter(n() >= 2000) %>%
mutate(num_to = n()) %>%
ungroup() %>%
mutate(to = factor(to, levels = names(sort(table(to), decreasing = TRUE))))
# filter the mails
filtered_sent <- all.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 2000) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of all emails sent within company (>=2000)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- all.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 2000) %>%
mutate(num_to = n()) %>%
ungroup() %>%
mutate(to = factor(to, levels = names(sort(table(to), decreasing = TRUE))))
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of all emails received within company(>=2000)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
common_users <- intersect(filtered_sent$from, filtered_receive$to)
print(common_users)
script_path <- rstudioapi::getActiveDocumentContext()$path
mother_path <- Sys.getenv("mother_path")
View(inboxes.from.to.df)
length(unique(inboxes.from.to.df$to))
View(all.fromto.df)
length(unique(all.fromto.df$to))
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(igraph)
library(reshape2)
# set the paths and working directory
notebook_path <- rstudioapi::getActiveDocumentContext()$path
mother_path <- dirname(dirname(notebook_path))
# set the path for the project, data, scripts, etc.
Sys.setenv(mother_path = mother_path)
script_path <- paste0(mother_path, "/scripts")
data_path <- paste0(mother_path, "/data")
# detect if the data is already downloaded, if not, then download and untar it.
if (!file.exists(paste0(data_path, "/enron_mail_20150507"))) {
message("No dataset detected, start downloading, please wait patiently.")
source(paste0(script_path, "/download_enron.R"))
download_data()
}
# load all the data
source(paste0(script_path, '/data_loading.R'))
View(users)
results_path <- paste0(mother_path, "/results")
save(users, file=paste0(results_path, "/users.Rdata"))
rm(users)
load(paste0(script_path, "/users.Rdata"))
load(paste0(results_path, "/users.Rdata"))
View(users)
View(inboxes.from.to.raw.df)
View(inboxes.within.fromto.df)
# make histograms of all the receivers and senders
hist_sent <- ggplot(inboxes.within.fromto.df, aes(x = from)) +
geom_bar() +
labs(title = "histogram of inbox emails sent within company", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
hist_received <- ggplot(inboxes.within.fromto.df, aes(x = to)) +
geom_bar() +
labs(title = "histogram of inbox emails received within company", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
# make plots for filtered data
filtered_sent <- inboxes.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 50) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of inbox emails sent within company (>=50)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- inboxes.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 50) %>%
mutate(num_to = n()) %>%
ungroup() %>%
mutate(to = factor(to, levels = names(sort(table(to), decreasing = T))))
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of inbox emails received within company(>=50)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(igraph)
library(reshape2)
# set the paths and working directory
notebook_path <- rstudioapi::getActiveDocumentContext()$path
mother_path <- dirname(dirname(notebook_path))
# set the path for the project, data, scripts, etc.
Sys.setenv(mother_path = mother_path)
script_path <- paste0(mother_path, "/scripts")
data_path <- paste0(mother_path, "/data")
results_path <- paste0(mother_path, "/results")
# detect if the data is already downloaded, if not, then download and untar it.
if (!file.exists(paste0(data_path, "/enron_mail_20150507"))) {
message("No dataset detected, start downloading, please wait patiently.")
source(paste0(script_path, "/download_enron.R"))
download_data()
}
# can reproduce the users info extraction with the annotated part 2 in data_loading.R
load(paste0(results_path, "/users.Rdata"))
# load all the dataframes we use
source(paste0(script_path, '/data_loading.R'))
mother_path <- dirname(dirname(script_path))
source("~/Stor674_enron_investigation/scripts/data_loading.R", echo=TRUE)
# detect if the data is already downloaded, if not, then download and untar it.
if (!file.exists(paste0(data_path, "/enron_mail_20150507"))) {
message("No dataset detected, start downloading, please wait patiently.")
source(paste0(script_path, "/download_enron.R"))
download_data()
}
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(igraph)
library(reshape2)
# set the paths and working directory
notebook_path <- rstudioapi::getActiveDocumentContext()$path
mother_path <- dirname(dirname(notebook_path))
# set the path for the project, data, scripts, etc.
Sys.setenv(mother_path = mother_path)
script_path <- paste0(mother_path, "/scripts")
data_path <- paste0(mother_path, "/data")
results_path <- paste0(mother_path, "/results")
# detect if the data is already downloaded, if not, then download and untar it.
if (!file.exists(paste0(data_path, "/enron_mail_20150507"))) {
message("No dataset detected, start downloading, please wait patiently.")
source(paste0(script_path, "/download_enron.R"))
download_data()
}
# load all the data we need for analyses
load(paste0(results_path, "/dfs.Rdata"))
# make histograms of all the receivers and senders
hist_sent <- ggplot(inboxes.within.fromto.df, aes(x = from)) +
geom_bar() +
labs(title = "histogram of inbox emails sent within company", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
hist_received <- ggplot(inboxes.within.fromto.df, aes(x = to)) +
geom_bar() +
labs(title = "histogram of inbox emails received within company", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
# make plots for filtered data
filtered_sent <- inboxes.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 50) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of inbox emails sent within company (>=50)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- inboxes.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 50) %>%
mutate(num_to = n()) %>%
ungroup() %>%
mutate(to = factor(to, levels = names(sort(table(to), decreasing = T))))
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of inbox emails received within company(>=50)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
common_users <- intersect(filtered_sent$from, filtered_receive$to)
print(common_users)
set.seed(321)
# Get the unique senders and recipients
all_names <- unique(c(inboxes.within.fromto.df$from, inboxes.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(inboxes.within.fromto.df$from, levels = all_names), factor(inboxes.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_inbox_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_inbox_network.png"), width = 3200, height = 2400)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,         # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
set.seed(321)
# Get the unique senders and recipients
all_names <- unique(c(inboxes.within.fromto.df$from, inboxes.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(inboxes.within.fromto.df$from, levels = all_names), factor(inboxes.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_inbox_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_inbox_network.png"), width = 3200, height = 2400)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,         # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
set.seed(321)
# Get the unique senders and recipients
all_names <- unique(c(inboxes.within.fromto.df$from, inboxes.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(inboxes.within.fromto.df$from, levels = all_names), factor(inboxes.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_inbox_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_inbox_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,         # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
causholli_inbox <- inboxes.within.fromto.df %>%
filter(to == 'causholli-m')
causholli_inbox
# filter the mails
filtered_sent <- all.within.fromto.df %>%
group_by(from) %>%
filter(n() >= 2000) %>%
mutate(num_from = n()) %>%
ungroup() %>%
mutate(from = factor(from, levels = names(sort(table(from), decreasing = TRUE))))
hist_sent <- ggplot(filtered_sent, aes(x = from)) +
geom_bar() +
labs(title = "histogram of all emails sent within company (>=2000)", x = 'Sent by:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_receive <- all.within.fromto.df %>%
group_by(to) %>%
filter(n() >= 2000) %>%
mutate(num_to = n()) %>%
ungroup() %>%
mutate(to = factor(to, levels = names(sort(table(to), decreasing = TRUE))))
hist_received <- ggplot(filtered_receive, aes(x = to)) +
geom_bar() +
labs(title = "histogram of all emails received within company(>=2000)", x = 'Sent to:') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot(hist_received)
plot(hist_sent)
common_users <- intersect(filtered_sent$from, filtered_receive$to)
print(common_users)
set.seed(123)
# Get the unique senders and recipients
all_names <- unique(c(all.within.fromto.df$from, all.within.fromto.df$to))
# Create a contingency table with a predefined set of row and column names
mail_count_table <- table(factor(all.within.fromto.df$from, levels = all_names), factor(all.within.fromto.df$to, levels = all_names))
# print(table_inboxes_from_to_within)
mail_count_df <- melt(mail_count_table)
# Create a heatmap using ggplot2
ggplot(mail_count_df, aes(x = Var1, y = Var2, fill = log(value))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Email Interaction Heatmap", x = "From", y = "To", fill = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a graph from the matrix
graph <- graph_from_adjacency_matrix(mail_count_table, mode = "undirected", weighted = TRUE, diag = FALSE)
# Filter edges with low weight (e.g., below a threshold)
# graph <- delete_edges(graph, E(graph)[weight < 5])
community <- cluster_louvain(graph)
png(paste0(mother_path, "/figures/email_all_cluster.png"), width=3200, height = 3200)
plot(community, graph, vertex.size=4)
dev.off()
layout <- layout_with_fr(graph)  # Fruchterman-Reingold layout (often better for clarity)
png(paste0(mother_path, "/figures/email_all_network.png"), width = 3200, height = 3200)  # Width and height in pixels
# Plot the network graph with adjustments
plot(graph,
vertex.size = 5,        # Larger nodes
vertex.label.cex = 0.8,  # Adjust text size
edge.width = E(graph)$weight,  # Edge width based on the weight (email count)
layout = layout,         # Use the new layout for better node spacing
main = "Email Interaction Network",
vertex.label.color = "black", # Change label color for contrast
vertex.color = "lightblue",  # Node color
edge.arrow.size = 0.5,   # Adjust arrow size on edges
edge.color = "gray",     # Edge color
vertex.label.dist = 1,   # Distance between label and node
vertex.frame.color = "white")  # Frame color around nodes
# Close the PNG device (save the plot)
dev.off()
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <- 10
target_nodes_1 <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes_1, ]
target_community <- 9
target_nodes_2 <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes_2, ]
c1.within.df <- all.within.fromto.df %>%
filter(from %in% cluster1$name) %>%
filter(to %in% cluster1$name)
c2.within.df <- all.within.fromto.df %>%
filter(from %in% cluster2$name) %>%
filter(to %in% cluster2$name)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.filtered.df$from, levels = target_nodes_1), factor(c1.filtered.df$to, levels=target_nodes_1))
c1_count_table
c2.filtered.df <- c2.within.df %>%
filter(from != to)
c2_count_table <- table(factor(c2.filtered.df$from, levels = target_nodes_2), factor(c2.filtered.df$to, levels=target_nodes_2))
c2_count_table
graph <- graph_from_adjacency_matrix(c2_count_table, mode = "directed", weighted = TRUE, diag = FALSE)
layout <- layout_with_fr(graph)
png(paste0(mother_path, "/figure/cluster1_network.png"), height = 3200, width = 3200)
plot(graph, vertex.size=5)
dev.off
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
# first save the community results into .csv files
community_df <- data.frame(
node = V(graph)$name,
community = membership(community)
)
# first save the community results into .csv files
# community_df <- data.frame(
#   node = V(graph)$name,
#   community = membership(community)
# )
# write.csv(community_df, paste0(mother_path, "/results/community_assignments.csv"), row.names = FALSE)
# get the membership information
membership(community)
target_community <- 10
target_nodes_1 <- V(graph)$name[membership(community) == target_community]
#print(target_nodes)  # Display the nodes in the target community
cluster1 <- users[users$name %in% target_nodes_1, ]
target_community <- 9
target_nodes_2 <- V(graph)$name[membership(community) == target_community]
# print(target_nodes)  # Display the nodes in the target community
cluster2 <- users[users$name %in% target_nodes_2, ]
c1.within.df <- all.within.fromto.df %>%
filter(from %in% cluster1$name) %>%
filter(to %in% cluster1$name)
c2.within.df <- all.within.fromto.df %>%
filter(from %in% cluster2$name) %>%
filter(to %in% cluster2$name)
c1.filtered.df <- c1.within.df %>%
filter(from != to)
c1_count_table <- table(factor(c1.filtered.df$from, levels = target_nodes_1), factor(c1.filtered.df$to, levels=target_nodes_1))
c1_count_table
c2.filtered.df <- c2.within.df %>%
filter(from != to)
c2_count_table <- table(factor(c2.filtered.df$from, levels = target_nodes_2), factor(c2.filtered.df$to, levels=target_nodes_2))
c2_count_table
graph <- graph_from_adjacency_matrix(c2_count_table, mode = "directed", weighted = TRUE, diag = FALSE)
layout <- layout_with_fr(graph)
png(paste0(mother_path, "/figures/cluster1_network.png"), height = 3200, width = 3200)
plot(graph, vertex.size=5)
dev.off
